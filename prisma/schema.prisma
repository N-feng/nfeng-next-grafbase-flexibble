// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  clerkId         String      
  email           String
  username        String    
  // avatarUrl       String
  photo           String
  // description     String
  firstName       String
  lastName        String
  planId          Int         @default(1)
  creditBalance   Int         @default(10)

  // githubUrl       String
  // linkedinUrl     String
  // userId          String
  projects        Project[]   @relation("UserToProject")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Profile {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      
  email           String
  avatarUrl       String
  description     String
  githubUrl       String
  linkedinUrl     String
  userId          String
  // projects        Project[]   @relation("UserToProject")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Project {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  // userId        String        
  // profileId     String        @db.ObjectId // Foreign Key to Store
  // createdBy     Profile       @relation("UserToProject", fields: [profileId], references: [id])  
  userId        String        @db.ObjectId // Foreign Key to Store
  createdBy     User          @relation("UserToProject", fields: [userId], references: [id])    
  title         String        
  description   String        
  // image         String
  images        Image[]       // Relation to Image model
  liveSiteUrl   String
  githubUrl     String
  category      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // @@index([profileId])
  @@index([userId])
}

model Image {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId // Foreign Key to Product
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
}
